name: 'Update Updater JSON'

on:
  release:
    types: [published, released]
  workflow_run:
    workflows: ["Release"]
    types: [completed]

jobs:
  update-updater-json:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    if: github.event_name == 'release' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - uses: actions/checkout@v4

      - name: Get release info
        id: get-release
        uses: actions/github-script@v7
        with:
          script: |
            let release;
            
            if (context.eventName === 'release') {
              release = context.payload.release;
            } else if (context.eventName === 'workflow_run') {
              // Get the latest release
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              release = releases[0];
            }
            
            if (!release) {
              throw new Error('No release found');
            }
            
            return {
              id: release.id,
              tag_name: release.tag_name,
              body: release.body,
              published_at: release.published_at
            };

      - name: Create updater JSON
        id: create-json
        uses: actions/github-script@v7
        with:
          script: |
            const releaseInfo = JSON.parse('${{ steps.get-release.outputs.result }}');
            
            // Get all assets from the release
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseInfo.id
            });
            
            console.log('Found assets:', assets.map(a => a.name));
            
            const platforms = {};
            
            // Find binary assets and their signatures
            for (const asset of assets) {
              let platform = null;
              let isSignature = asset.name.endsWith('.sig');
              
              if (asset.name.includes('.msi')) {
                platform = 'windows-x86_64';
              } else if (asset.name.includes('.app.tar.gz')) {
                platform = 'darwin-x86_64';
              } else if (asset.name.includes('.AppImage.tar.gz')) {
                platform = 'linux-x86_64';
              }
              
              if (platform) {
                if (!platforms[platform]) {
                  platforms[platform] = { url: '', signature: '' };
                }
                
                if (isSignature) {
                  // Download signature content
                  try {
                    const sigResponse = await fetch(asset.browser_download_url);
                    const signature = await sigResponse.text();
                    platforms[platform].signature = signature.trim();
                  } catch (error) {
                    console.error(`Failed to fetch signature for ${asset.name}:`, error);
                    platforms[platform].signature = '';
                  }
                } else {
                  platforms[platform].url = asset.browser_download_url;
                }
              }
            }
            
            // Create updater JSON
            const updaterJson = {
              version: releaseInfo.tag_name,
              notes: releaseInfo.body || 'New version available',
              pub_date: releaseInfo.published_at,
              platforms: platforms
            };
            
            console.log('Generated updater JSON:', JSON.stringify(updaterJson, null, 2));
            
            // Write to file
            const fs = require('fs');
            fs.writeFileSync('latest.json', JSON.stringify(updaterJson, null, 2));
            
            return 'success';

      - name: Upload latest.json to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseInfo = JSON.parse('${{ steps.get-release.outputs.result }}');
            
            const filePath = 'latest.json';
            const fileName = 'latest.json';
            
            // Read the file
            const fileContent = fs.readFileSync(filePath);
            
            // Check if asset already exists and delete it
            try {
              const { data: assets } = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseInfo.id
              });
              
              const existingAsset = assets.find(asset => asset.name === fileName);
              if (existingAsset) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: existingAsset.id
                });
                console.log(`Deleted existing ${fileName}`);
              }
            } catch (error) {
              console.log(`No existing ${fileName} to delete`);
            }
            
            // Upload as release asset
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseInfo.id,
              name: fileName,
              data: fileContent,
              headers: {
                'content-type': 'application/json'
              }
            });
            
            console.log(`Successfully uploaded ${fileName} to release`);
            return 'success';
