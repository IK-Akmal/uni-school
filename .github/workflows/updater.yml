name: 'Update Updater JSON'

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-updater-json:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Debug Info
        run: |
          echo "=== Debug Information ==="
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "=========================="

      - name: Create updater JSON
        uses: actions/github-script@v7
        with:
          script: |
            console.log('=== Starting updater JSON creation ===');
            console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
            console.log('Event:', context.eventName);
            
            // Get the latest release
            console.log('Fetching releases...');
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            
            console.log(`Found ${releases.length} releases`);
            if (releases.length > 0) {
              console.log('Latest releases:', releases.map(r => r.tag_name));
            }
            
            if (!releases || releases.length === 0) {
              console.error('No releases found!');
              return 'no-releases';
            }
            
            const release = releases[0];
            console.log(`Processing release: ${release.tag_name}`);
            
            // Get release assets
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            
            console.log('Found assets:', assets.map(a => a.name));
            
            if (assets.length === 0) {
              console.error('No assets found in release!');
              return 'no-assets';
            }
            
            // Build platforms object
            const platforms = {};
            
            // Process each asset
            for (const asset of assets) {
              console.log(`Processing asset: ${asset.name}`);
              
              let platform = null;
              
              if (asset.name.includes('.msi')) {
                platform = 'windows-x86_64';
              } else if (asset.name.includes('.app.tar.gz')) {
                platform = 'darwin-x86_64';
              } else if (asset.name.includes('.AppImage.tar.gz')) {
                platform = 'linux-x86_64';
              }
              
              if (platform) {
                if (!platforms[platform]) {
                  platforms[platform] = { url: '', signature: '' };
                }
                
                if (asset.name.endsWith('.sig')) {
                  // Get signature
                  try {
                    console.log(`Fetching signature from: ${asset.browser_download_url}`);
                    const response = await fetch(asset.browser_download_url);
                    if (!response.ok) {
                      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    const signature = await response.text();
                    platforms[platform].signature = signature.trim();
                    console.log(`✓ Got signature for ${platform}: ${signature.substring(0, 50)}...`);
                  } catch (error) {
                    console.error(`✗ Failed to get signature for ${asset.name}:`, error);
                    platforms[platform].signature = '';
                  }
                } else {
                  platforms[platform].url = asset.browser_download_url;
                  console.log(`✓ Got URL for ${platform}: ${asset.browser_download_url}`);
                }
              } else {
                console.log(`Skipping asset: ${asset.name} (no platform match)`);
              }
            }
            
            console.log('Platforms object:', JSON.stringify(platforms, null, 2));
            
            // Create updater JSON
            const updaterJson = {
              version: release.tag_name,
              notes: release.body || 'New version available',
              pub_date: release.published_at,
              platforms: platforms
            };
            
            console.log('=== Final updater JSON ===');
            console.log(JSON.stringify(updaterJson, null, 2));
            console.log('==========================');
            
            // Save to file
            const fs = require('fs');
            const jsonContent = JSON.stringify(updaterJson, null, 2);
            fs.writeFileSync('latest.json', jsonContent);
            console.log('✓ Saved latest.json to filesystem');
            
            // Delete existing latest.json if it exists
            try {
              const existingAsset = assets.find(a => a.name === 'latest.json');
              if (existingAsset) {
                console.log(`Deleting existing latest.json (ID: ${existingAsset.id})`);
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: existingAsset.id
                });
                console.log('✓ Deleted existing latest.json');
              } else {
                console.log('No existing latest.json found');
              }
            } catch (error) {
              console.log('Error checking/deleting existing latest.json:', error);
            }
            
            // Upload new latest.json
            try {
              console.log('Uploading new latest.json...');
              const fileContent = fs.readFileSync('latest.json');
              const uploadResult = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: 'latest.json',
                data: fileContent,
                headers: {
                  'content-type': 'application/json'
                }
              });
              
              console.log('✓ Successfully uploaded latest.json');
              console.log(`Asset ID: ${uploadResult.data.id}`);
              console.log(`Download URL: ${uploadResult.data.browser_download_url}`);
              return 'success';
            } catch (error) {
              console.error('✗ Failed to upload latest.json:', error);
              throw error;
            }
