name: 'Update Updater JSON'

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-updater-json:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Create updater JSON
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest release
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (!releases || releases.length === 0) {
              throw new Error('No releases found');
            }
            
            const release = releases[0];
            console.log(`Processing release: ${release.tag_name}`);
            
            // Get release assets
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            
            console.log('Found assets:', assets.map(a => a.name));
            
            // Build platforms object
            const platforms = {};
            
            // Process each asset
            for (const asset of assets) {
              console.log(`Processing asset: ${asset.name}`);
              
              let platform = null;
              
              if (asset.name.includes('.msi')) {
                platform = 'windows-x86_64';
              } else if (asset.name.includes('.app.tar.gz')) {
                platform = 'darwin-x86_64';
              } else if (asset.name.includes('.AppImage.tar.gz')) {
                platform = 'linux-x86_64';
              }
              
              if (platform) {
                if (!platforms[platform]) {
                  platforms[platform] = { url: '', signature: '' };
                }
                
                if (asset.name.endsWith('.sig')) {
                  // Get signature
                  try {
                    const response = await fetch(asset.browser_download_url);
                    const signature = await response.text();
                    platforms[platform].signature = signature.trim();
                    console.log(`Got signature for ${platform}`);
                  } catch (error) {
                    console.error(`Failed to get signature for ${asset.name}:`, error);
                  }
                } else {
                  platforms[platform].url = asset.browser_download_url;
                  console.log(`Got URL for ${platform}`);
                }
              }
            }
            
            // Create updater JSON
            const updaterJson = {
              version: release.tag_name,
              notes: release.body || 'New version available',
              pub_date: release.published_at,
              platforms: platforms
            };
            
            console.log('Final updater JSON:', JSON.stringify(updaterJson, null, 2));
            
            // Save to file
            const fs = require('fs');
            fs.writeFileSync('latest.json', JSON.stringify(updaterJson, null, 2));
            
            // Delete existing latest.json if it exists
            try {
              const existingAsset = assets.find(a => a.name === 'latest.json');
              if (existingAsset) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: existingAsset.id
                });
                console.log('Deleted existing latest.json');
              }
            } catch (error) {
              console.log('No existing latest.json to delete');
            }
            
            // Upload new latest.json
            const fileContent = fs.readFileSync('latest.json');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'latest.json',
              data: fileContent,
              headers: {
                'content-type': 'application/json'
              }
            });
            
            console.log('Successfully uploaded latest.json');
            return 'success';
